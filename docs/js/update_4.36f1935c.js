(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["update_4"],{"056c":function(e,t,n){},"0f62":function(e,t,n){"use strict";var a=n("056c"),s=n.n(a);s.a},"4e5b":function(e,t,n){"use strict";n.r(t);var a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("h1",[e._v("Assignment 4 - Particle System")]),n("h2",[e._v("Results")]),n("h3",{staticStyle:{color:"red"}},[e._v(" Refresh if lagging!")]),n("ParticleFramework"),n("h2",[e._v("Summary")]),e._m(0)],1)},s=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticStyle:{"text-align":"left"}},[n("div",{staticClass:"update-text"},[e._v(" \n      Originally, I attempted to add/remove meshes to and from the scene upon spawning and despawning. This\n      kills the performance, so instead I set positions to NaN and maintain a pool of meshes! \n    ")])])}],i=n("4c09"),r={components:{ParticleFramework:i["a"]}},o=r,c=(n("0f62"),n("2877")),l=Object(c["a"])(o,a,s,!1,null,null,null);t["default"]=l.exports}}]);
//# sourceMappingURL=update_4.36f1935c.js.map