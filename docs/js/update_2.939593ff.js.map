{"version":3,"sources":["webpack:///./node_modules/core-js/modules/_string-html.js","webpack:///./node_modules/core-js/modules/es6.string.sub.js","webpack:///./src/views/Update_2.vue?8698","webpack:///./src/views/Update_2.vue?69e5","webpack:///./src/components/2_billiards/BilliardsFramework.vue?ed74","webpack:///./src/components/2_billiards/PhysSim.js","webpack:///src/components/2_billiards/BilliardsFramework.vue","webpack:///./src/components/2_billiards/BilliardsFramework.vue?2821","webpack:///./src/components/2_billiards/BilliardsFramework.vue","webpack:///src/views/Update_2.vue","webpack:///./src/views/Update_2.vue?ea0a","webpack:///./src/views/Update_2.vue"],"names":["$export","fails","defined","quot","createHTML","string","tag","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase","split","length","this","render","_vm","_h","$createElement","_c","_self","_v","_m","staticRenderFns","staticStyle","staticClass","attrs","on","$event","playSim","setupBasic","setupFric","setupRest","directives","name","rawName","expression","modifiers","domProps","target","composing","co_restitution","_n","$forceUpdate","co_static","initial_shot_x","initial_shot_y","PhysicsSim","co_sliding","balls","table","isPlaying","dt","updateEverything","old_positions","updatePositions","momentums","calcMomentums","impulses","calcCollisions","i","ball","new_mntm","impulse","new_vel","THREE","x","y","divideScalar","mass","add","vel","oldPos","ball_x","mesh","position","ball_y","push","new_pos","multiplyScalar","mntms","force_calc","calculate_forces","old_pos","border_impulse","handle_border_collisions","handle_all_ball_collisions","rad","geometry","boundingSphere","radius","a","b","a_x","a_y","b_x","b_y","a_vel","b_vel","dist","Math","sqrt","pow","line_of_action","sub","normalize","j","dot","a_impl","b_impl","velocity","umg","prev_x","prev_y","t_x","t_y","t_w2","parameters","width","t_h2","height","b_r","return_impulse","current_y","u","lerp_find_u","current_x","lerp","impl","cushion_impulse","z","data","camera","scene","renderer","sceneObjects","animationInput","originTime","lastFrameTime","endTime","isPaused","threeClock","tableWidth","ballMass","simulation","ballPositions","ballObjects","borderObjects","methods","init_threejs","setupScene","setupSimulation","setSize","threeJsDiv","clientWidth","clientHeight","performance","now","appendChild","domElement","updateScene","updateSim","animationLoop","requestAnimationFrame","getDelta","bl","mounted","component","components","BilliardsFramework"],"mappings":"+FAAA,IAAIA,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,QAChBC,EAAU,EAAQ,QAClBC,EAAO,KAEPC,EAAa,SAAUC,EAAQC,EAAKC,EAAWC,GACjD,IAAIC,EAAIC,OAAOR,EAAQG,IACnBM,EAAK,IAAML,EAEf,MADkB,KAAdC,IAAkBI,GAAM,IAAMJ,EAAY,KAAOG,OAAOF,GAAOI,QAAQT,EAAM,UAAY,KACtFQ,EAAK,IAAMF,EAAI,KAAOH,EAAM,KAErCO,EAAOC,QAAU,SAAUC,EAAMC,GAC/B,IAAIC,EAAI,GACRA,EAAEF,GAAQC,EAAKZ,GACfJ,EAAQA,EAAQkB,EAAIlB,EAAQmB,EAAIlB,EAAM,WACpC,IAAImB,EAAO,GAAGL,GAAM,KACpB,OAAOK,IAASA,EAAKC,eAAiBD,EAAKE,MAAM,KAAKC,OAAS,IAC7D,SAAUN,K,oCCfhB,EAAQ,OAAR,CAA0B,MAAO,SAAUb,GACzC,OAAO,WACL,OAAOA,EAAWoB,KAAM,MAAO,GAAI,Q,2DCJvC,yBAA4c,EAAG,G,yCCA/c,IAAIC,EAAS,WAAa,IAAIC,EAAIF,KAASG,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,KAAK,CAACH,EAAIK,GAAG,8BAA8BF,EAAG,KAAK,CAACH,EAAIK,GAAG,aAAaF,EAAG,sBAAsBA,EAAG,KAAK,CAACH,EAAIK,GAAG,aAAaL,EAAIM,GAAG,IAAI,IAClPC,EAAkB,CAAC,WAAa,IAAIP,EAAIF,KAASG,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACK,YAAY,CAAC,aAAa,SAAS,CAACL,EAAG,MAAM,CAACM,YAAY,eAAe,CAACT,EAAIK,GAAG,mRCDjM,EAAS,WAAa,IAAIL,EAAIF,KAASG,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,MAAM,CAACK,YAAY,CAAC,MAAQ,QAAQ,OAAS,QAAQ,OAAS,QAAQE,MAAM,CAAC,GAAK,kBAAkBP,EAAG,SAAS,CAACK,YAAY,CAAC,OAAS,aAAaG,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOZ,EAAIa,aAAa,CAACb,EAAIK,GAAG,eAAeF,EAAG,MAAM,CAACA,EAAG,MAAM,CAACH,EAAIK,GAAG,2EAA6EF,EAAG,SAAS,CAACK,YAAY,CAAC,OAAS,QAAQG,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOZ,EAAIc,gBAAgB,CAACd,EAAIK,GAAG,gBAAgBF,EAAG,SAAS,CAACK,YAAY,CAAC,OAAS,QAAQG,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOZ,EAAIe,eAAe,CAACf,EAAIK,GAAG,kCAAkCF,EAAG,SAAS,CAACK,YAAY,CAAC,OAAS,QAAQG,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOZ,EAAIgB,eAAe,CAAChB,EAAIK,GAAG,8CAA8CF,EAAG,MAAM,CAACA,EAAG,MAAM,CAACH,EAAIK,GAAG,iBAAiBF,EAAG,MAAM,CAACA,EAAG,OAAO,CAACH,EAAIK,GAAG,mBAAmBF,EAAG,QAAQ,CAACc,WAAW,CAAC,CAACC,KAAK,QAAQC,QAAQ,iBAAiBrC,MAAOkB,EAAkB,eAAEoB,WAAW,iBAAiBC,UAAU,CAAC,QAAS,KAAQX,MAAM,CAAC,KAAO,UAAUY,SAAS,CAAC,MAAStB,EAAkB,gBAAGW,GAAG,CAAC,MAAQ,SAASC,GAAWA,EAAOW,OAAOC,YAAqBxB,EAAIyB,eAAezB,EAAI0B,GAAGd,EAAOW,OAAOzC,SAAQ,KAAO,SAAS8B,GAAQ,OAAOZ,EAAI2B,qBAAqBxB,EAAG,MAAM,CAACA,EAAG,OAAO,CAACH,EAAIK,GAAG,wBAAwBF,EAAG,QAAQ,CAACc,WAAW,CAAC,CAACC,KAAK,QAAQC,QAAQ,iBAAiBrC,MAAOkB,EAAa,UAAEoB,WAAW,YAAYC,UAAU,CAAC,QAAS,KAAQX,MAAM,CAAC,KAAO,UAAUY,SAAS,CAAC,MAAStB,EAAa,WAAGW,GAAG,CAAC,MAAQ,SAASC,GAAWA,EAAOW,OAAOC,YAAqBxB,EAAI4B,UAAU5B,EAAI0B,GAAGd,EAAOW,OAAOzC,SAAQ,KAAO,SAAS8B,GAAQ,OAAOZ,EAAI2B,qBAAqBxB,EAAG,MAAM,CAACA,EAAG,OAAO,CAACH,EAAIK,GAAG,4BAA4BF,EAAG,QAAQ,CAACc,WAAW,CAAC,CAACC,KAAK,QAAQC,QAAQ,iBAAiBrC,MAAOkB,EAAkB,eAAEoB,WAAW,iBAAiBC,UAAU,CAAC,QAAS,KAAQX,MAAM,CAAC,KAAO,UAAUY,SAAS,CAAC,MAAStB,EAAkB,gBAAGW,GAAG,CAAC,MAAQ,SAASC,GAAWA,EAAOW,OAAOC,YAAqBxB,EAAI6B,eAAe7B,EAAI0B,GAAGd,EAAOW,OAAOzC,SAAQ,KAAO,SAAS8B,GAAQ,OAAOZ,EAAI2B,mBAAmBxB,EAAG,QAAQ,CAACc,WAAW,CAAC,CAACC,KAAK,QAAQC,QAAQ,iBAAiBrC,MAAOkB,EAAkB,eAAEoB,WAAW,iBAAiBC,UAAU,CAAC,QAAS,KAAQX,MAAM,CAAC,KAAO,UAAUY,SAAS,CAAC,MAAStB,EAAkB,gBAAGW,GAAG,CAAC,MAAQ,SAASC,GAAWA,EAAOW,OAAOC,YAAqBxB,EAAI8B,eAAe9B,EAAI0B,GAAGd,EAAOW,OAAOzC,SAAQ,KAAO,SAAS8B,GAAQ,OAAOZ,EAAI2B,0BACh+E,EAAkB,G,0HCIDI,E,WACnB,WAAYN,EAAgBO,EAAYC,EAAOC,GAAO,uBACpDpC,KAAKkC,WAAaA,EAClBlC,KAAK2B,eAAiBA,EAGtB3B,KAAKqC,WAAY,EAEjBrC,KAAKmC,MAAQA,EAEbnC,KAAKoC,MAAQA,E,yDAILE,GACLtC,KAAKqC,WACNrC,KAAKuC,iBAAiBD,K,uCAITA,GASf,IAPA,IAAIE,EAAgBxC,KAAKyC,gBAAgBH,GACrCI,EAAY1C,KAAK2C,cAAcL,GAG/BM,EAAW5C,KAAK6C,eAAeP,EAAIE,GAG/BM,EAAI,EAAGA,EAAI9C,KAAKmC,MAAMpC,OAAQ+C,IAAK,CACzC,IAAIC,EAAO/C,KAAKmC,MAAMW,GAClBE,EAAWN,EAAUI,GACrBG,EAAUL,EAASE,GACnBI,EAAU,IAAIC,aAAcH,EAASI,EAAGJ,EAASK,GAAGC,aAAaP,EAAKQ,MAAMC,IAAIP,GAEpFF,EAAKU,IAAMP,K,sCAICZ,GACd,IAAIoB,EAAS,GADK,uBAElB,YAAgB1D,KAAKmC,MAArB,+CAA4B,KAApBY,EAAoB,QACtBY,EAASZ,EAAKa,KAAKC,SAAST,EAC5BU,EAASf,EAAKa,KAAKC,SAASR,EAChCK,EAAOK,KAAK,CAACX,EAAGO,EAAQN,EAAGS,IAC3B,IAAIE,EAAU,IAAIb,aAAcQ,EAAQG,GAAQN,IAAM,IAAIL,aAAcJ,EAAKU,IAAIL,EAAGL,EAAKU,IAAIJ,GAAGY,eAAe3B,IAC/GS,EAAKa,KAAKC,SAAST,EAAIY,EAAQZ,EAC/BL,EAAKa,KAAKC,SAASR,EAAIW,EAAQX,GARf,kFAUlB,OAAOK,I,oCAGKpB,GACZ,IAAI4B,EAAQ,GADI,uBAEhB,YAAgBlE,KAAKmC,MAArB,+CAA4B,KAApBY,EAAoB,QACtBoB,EAAanE,KAAKoE,iBAAiB9B,EAAIS,EAAKQ,KAAMR,EAAKU,KACvDT,EAAW,IAAIG,aAAcJ,EAAKU,IAAIL,EAAIL,EAAKQ,KAAMR,EAAKU,IAAIJ,EAAIN,EAAKQ,MAAMC,IAAM,IAAIL,aAAcgB,EAAWf,EAAGe,EAAWd,GAAGY,eAAe3B,IACpJ4B,EAAMH,KAAKf,IALG,kFAOhB,OAAOkB,I,qCAGM5B,EAAI+B,GAGjB,IADA,IAAIzB,EAAW,GACPE,EAAI,EAAGA,EAAIuB,EAAQtE,OAAQ+C,IAAK,CACtC,IAAIwB,EAAiBtE,KAAKuE,yBAAyBvE,KAAKmC,MAAMW,GAAIuB,EAAQvB,GAAGM,EAAGiB,EAAQvB,GAAGO,GAC3FT,EAASmB,KAAKO,GAMhB,OAFAtE,KAAKwE,2BAA2BlC,EAAI+B,EAASzB,GAEtCA,I,iDAGkBN,EAAI+B,EAASzB,GAKtC,IAHA,IAAI6B,EAAMzE,KAAKmC,MAAM,GAAGyB,KAAKc,SAASC,eAAeC,OACjDrB,EAAOvD,KAAKmC,MAAM,GAAGoB,KAEjBsB,EAAI,EAAGA,EAAI7E,KAAKmC,MAAMpC,OAAQ8E,IACpC,IAAI,IAAIC,EAAID,EAAI,EAAGC,EAAI9E,KAAKmC,MAAMpC,OAAQ+E,IACxC,GAAGD,GAAKC,EAAR,CAEA,IAAIC,EAAM/E,KAAKmC,MAAM0C,GAAGjB,KAAKC,SAAST,EAAG4B,EAAMhF,KAAKmC,MAAM0C,GAAGjB,KAAKC,SAASR,EACvE4B,EAAMjF,KAAKmC,MAAM2C,GAAGlB,KAAKC,SAAST,EAAG8B,EAAMlF,KAAKmC,MAAM2C,GAAGlB,KAAKC,SAASR,EAEvE8B,EAAQnF,KAAKmC,MAAM0C,GAAGpB,IAAK2B,EAAQpF,KAAKmC,MAAM2C,GAAGrB,IAGjD4B,EAAOC,KAAKC,KAAMD,KAAKE,IAAIT,EAAME,EAAI,GAAKK,KAAKE,IAAIR,EAAME,EAAK,IAClE,GAAGG,GAAc,EAANZ,EAAW,CAEpB,IAAIgB,EAAiB,IAAItC,aAAc4B,EAAKC,GAAKU,IAAI,IAAIvC,aAAc8B,EAAKC,IAAMS,YAG9EC,EAAKrC,GAAQ,IAAIJ,aAAciC,EAAMhC,EAAGgC,EAAM/B,GAAGwC,IAAIJ,GAAkB,IAAItC,aAAcgC,EAAM/B,EAAG+B,EAAM9B,GAAGwC,IAAIJ,KAAoBzF,KAAK2B,eAAiB,GAAM,EAE/JmE,EAAS,IAAI3C,aAAcsC,EAAerC,EAAGqC,EAAepC,GAAGY,eAAe2B,EAAIrC,GAClFwC,EAAS,IAAI5C,aAAcsC,EAAerC,EAAGqC,EAAepC,GAAGY,eAAe2B,EAAIrC,GAAMU,gBAAgB,GAG5GrB,EAASiC,GAAGzB,GAAK0C,EAAO1C,EAAGR,EAASiC,GAAGxB,GAAKyC,EAAOzC,EACnDT,EAASkC,GAAG1B,GAAK2C,EAAO3C,EAAGR,EAASkC,GAAGzB,GAAK0C,EAAO1C,EAGnDrD,KAAKmC,MAAM0C,GAAGjB,KAAKC,SAAST,EAAIiB,EAAQQ,GAAGzB,EAC3CpD,KAAKmC,MAAM0C,GAAGjB,KAAKC,SAASR,EAAIgB,EAAQQ,GAAGxB,EAE3CrD,KAAKmC,MAAM2C,GAAGlB,KAAKC,SAAST,EAAIiB,EAAQS,GAAG1B,EAC3CpD,KAAKmC,MAAM2C,GAAGlB,KAAKC,SAASR,EAAIgB,EAAQS,GAAGzB,M,6BAYjDrD,KAAKqC,WAAY,I,8BAIjBrC,KAAKqC,WAAY,I,uCAOFC,EAAIiB,EAAMyC,GAGzB,GAAGA,EAASjG,UAAY,EACtB,OAAO,IAAIoD,aAAc,EAAG,GAG9B,IAAI8C,EAAMjG,KAAKkC,YAAqB,KAAPqB,GAC7B,OAAO,IAAIJ,cAAe6C,EAAS5C,GAAI4C,EAAS3C,GAAGsC,YAAY1B,eAAegC,K,+CAGvDlD,EAAMmD,EAAQC,GAKrC,IAAIC,EAAMpG,KAAKoC,MAAMyB,SAAST,EAAGiD,EAAMrG,KAAKoC,MAAMyB,SAASR,EAAGiD,EAAOtG,KAAKoC,MAAMsC,SAAS6B,WAAWC,MAAQ,EAAKC,EAAOzG,KAAKoC,MAAMsC,SAAS6B,WAAWG,OAAS,EAG5JzB,EAAMlC,EAAKa,KAAKC,SAAST,EAAG8B,EAAMnC,EAAKa,KAAKC,SAASR,EAAGsD,EAAM5D,EAAKa,KAAKc,SAASC,eAAeC,OAEhGgC,EAAiB,IAAIzD,aAAc,EAAE,GAIzC,GAAK+B,EAAMyB,GAAQN,EAAMI,EAAO,CAG9B,IAAII,EAAY9D,EAAKa,KAAKC,SAASR,EACnCN,EAAKa,KAAKC,SAASR,EAAIgD,EAAMI,EAAOE,EAGpC,IAAIG,EAAI9G,KAAK+G,YAAYF,EAAWV,EAAQpD,EAAKa,KAAKC,SAASR,GAG3D2D,EAAYjE,EAAKa,KAAKC,SAAST,EACnCL,EAAKa,KAAKC,SAAST,EAAIpD,KAAKiH,KAAKD,EAAWd,EAAQY,GAGpD,IAAII,EAAOlH,KAAKmH,gBAAgBpE,EAAKQ,KAAMR,EAAKU,IAAK,IAAIN,aAAc,GAAI,IAC3EyD,EAAevD,GAAK6D,EAAK7D,EACzBuD,EAAexD,GAAK8D,EAAK9D,EAM3B,GAAK8B,EAAMyB,GAAQN,EAAMI,EAAO,CAG9B,IAAII,EAAY9D,EAAKa,KAAKC,SAASR,EACnCN,EAAKa,KAAKC,SAASR,EAAIgD,EAAMI,EAAOE,EAGpC,IAAIG,EAAI9G,KAAK+G,YAAYF,EAAWV,EAAQpD,EAAKa,KAAKC,SAASR,GAG3D2D,EAAYjE,EAAKa,KAAKC,SAAST,EACnCL,EAAKa,KAAKC,SAAST,EAAIpD,KAAKiH,KAAKD,EAAWd,EAAQY,GAGpD,IAAII,EAAOlH,KAAKmH,gBAAgBpE,EAAKQ,KAAMR,EAAKU,IAAK,IAAIN,aAAc,EAAG,IAC1EyD,EAAevD,GAAK6D,EAAK7D,EACzBuD,EAAexD,GAAK8D,EAAK9D,EAO3B,GAAK6B,EAAM0B,GAAQP,EAAME,EAAO,CAG9B,IAAIU,EAAYjE,EAAKa,KAAKC,SAAST,EACnCL,EAAKa,KAAKC,SAAST,EAAIgD,EAAME,EAAOK,EAGpC,IAAIG,EAAI9G,KAAK+G,YAAYC,EAAWd,EAAQnD,EAAKa,KAAKC,SAAST,GAG3DyD,EAAY9D,EAAKa,KAAKC,SAASR,EACnCN,EAAKa,KAAKC,SAASR,EAAIrD,KAAKiH,KAAKJ,EAAWV,EAAQW,GAGpD,IAAII,EAAOlH,KAAKmH,gBAAgBpE,EAAKQ,KAAMR,EAAKU,IAAK,IAAIN,cAAe,EAAG,IAC3EyD,EAAevD,GAAK6D,EAAK7D,EACzBuD,EAAexD,GAAK8D,EAAK9D,EAO3B,GAAK6B,EAAM0B,GAAQP,EAAME,EAAO,CAG9B,IAAIU,EAAYjE,EAAKa,KAAKC,SAAST,EACnCL,EAAKa,KAAKC,SAAST,EAAIgD,EAAME,EAAOK,EAGpC,IAAIG,EAAI9G,KAAK+G,YAAYC,EAAWd,EAAQnD,EAAKa,KAAKC,SAAST,GAG3DyD,EAAY9D,EAAKa,KAAKC,SAASR,EACnCN,EAAKa,KAAKC,SAASR,EAAIrD,KAAKiH,KAAKJ,EAAWV,EAAQW,GAGpD,IAAII,EAAOlH,KAAKmH,gBAAgBpE,EAAKQ,KAAMR,EAAKU,IAAK,IAAIN,aAAc,EAAG,IAC1EyD,EAAevD,GAAK6D,EAAK7D,EACzBuD,EAAexD,GAAK8D,EAAK9D,EAO3B,OAAOwD,I,sCAIOrD,EAAMyC,EAAUP,GAiB9B,IAAIG,EAAI,IAAIzC,cAAe6C,EAAS5C,GAAI4C,EAAS3C,GAAGwC,IAAIJ,GAAkBlC,GAAQvD,KAAK2B,eAAiB,GAExG,OAAO,IAAIwB,aAAcsC,EAAerC,EAAGqC,EAAepC,GAAGY,eAAe2B,EAAIrC,K,2BAM7EH,EAAGC,EAAGyD,GACT,OAAO1D,EAAK0D,GAAKzD,EAAID,K,kCAGXA,EAAGC,EAAG+D,GAChB,OAAQA,EAAIhE,IAAMC,EAAID,O,KCjQ1B,GACEiE,KADF,WAEI,MAAO,CAELC,OAAQ,KACRC,MAAO,KACPC,SAAU,KACV5D,KAAM,KACN6D,aAAc,GAGdC,eAAgB,GAGhBC,WAAY,EACZC,cAAe,EACfC,QAAS,IACTC,UAAU,EACVC,WAAY,KAIZC,WAAY,MAAZ,YAAN,MAAM,SAAN,KACMC,SAAU,KACVtG,eAAgB,GAAhB,UAAN,GACMuG,WAAY,KACZnG,gBAAiB,GAAjB,eAAN,EAGMoG,cAAe,CACrB,CAAQ,EAAR,EAAQ,EAAR,EAAQ,IAAR,MAAQ,MAAR,WACA,CAAQ,EAAR,EAAQ,EAAR,EAAQ,IAAR,MAAQ,MAAR,WACA,CAAQ,EAAR,EAAQ,EAAR,EAAQ,IAAR,MAAQ,MAAR,WACA,CAAQ,EAAR,EAAQ,GAAR,EAAQ,IAAR,MAAQ,MAAR,YAEMC,YAAa,GACbC,cAAe,GACfjG,MAAO,OAGXkG,QAAS,CACPC,aADJ,WAGM,IAAN,0CAGMvI,KAAKuH,MAAQ,IAAI,EAAvB,SAGMvH,KAAKsH,OAAS,IAAI,EAAxB,4DAGMtH,KAAKsH,OAAOzD,SAASuD,EAAI,GAGzBpH,KAAKwI,aAGLxI,KAAKyI,kBAGLzI,KAAKwH,SAAW,IAAI,EAA1B,iCACMxH,KAAKwH,SAASkB,QAAQC,EAAWC,YAAaD,EAAWE,cAGzD7I,KAAK2H,WAAamB,YAAYC,MAC9B/I,KAAK4H,cAAgB5H,KAAK2H,WAC1B3H,KAAK+H,WAAa,IAAI,EAA5B,SAGMY,EAAWK,YAAYhJ,KAAKwH,SAASyB,aAEvCT,WAhCJ,WAmCM,IAAN,yCACQ,IAAR,wBAGA,yFAAU,MAAV,WACQ,EAAR,eACQ,EAAR,eAGQ,KAAR,aAGQ,KAAR,kBACU,KAAV,EACU,IAAV,kHACU,KAAV,gBAKM,IAAN,qGAAQ,MAAR,aACM,EAAN,cAEM,IAAN,2GAAQ,MAAR,aACM,EAAN,gBAEM,IAAN,yFAAQ,MAAR,aACM,EAAN,iCAEM,IAAN,yFAAQ,MAAR,aACM,EAAN,iCAEM,IAAN,0FAAQ,MAAR,aACM,EAAN,kCAEM,IAAN,0FAAQ,MAAR,aACM,EAAN,kCAEM,KAAN,aACM,KAAN,aACM,KAAN,QACM,KAAN,aACM,KAAN,aACM,KAAN,aACM,KAAN,aAEM,KAAN,6BAGIU,YApFJ,SAoFA,GAEMlJ,KAAKkI,WAAWiB,UAAU7G,IAE5B8G,cAxFJ,SAwFA,GAEMC,sBAAsBrJ,KAAKoJ,eAG3BpJ,KAAKkJ,YAAYlJ,KAAK+H,WAAWuB,YAGjCtJ,KAAKwH,SAASvH,OAAOD,KAAKuH,MAAOvH,KAAKsH,SAExCmB,gBAlGJ,WAmGMzI,KAAKkI,WAAa,IAAI,EAA5B,iEAEInH,QArGJ,WAuGMf,KAAKkI,WAAW7F,WAAY,EAG5B,IAAN,uCACQ,IAAR,sBACQkH,EAAG3F,KAAKC,SAAST,EAAIpD,KAAKmI,cAAcrF,GAAGM,EAC3CmG,EAAG3F,KAAKC,SAASR,EAAIrD,KAAKmI,cAAcrF,GAAGO,EAE3CkG,EAAG9F,IAAW,GAALX,EAAS,IAAI,EAA9B,2HAGM9C,KAAKkI,WAAa,IAAI,EAA5B,gEACMlI,KAAKkI,WAAW7F,WAAY,GAE9BrB,WArHJ,WAsHMhB,KAAK2B,eAAiB,GACtB3B,KAAK8B,UAAY,IAEnBb,UAzHJ,WA0HMjB,KAAK2B,eAAiB,GACtB3B,KAAK8B,UAAY,KAEnBZ,UA7HJ,WA8HMlB,KAAK2B,eAAiB,IACtB3B,KAAK8B,UAAY,KAGrB0H,QA1KF,WA2KIxJ,KAAKuI,eACLvI,KAAKoJ,kBC5MkW,I,YCOvWK,EAAY,eACd,EACA,EACA,GACA,EACA,KACA,KACA,MAIa,EAAAA,E,QCGf,GACEC,WAAY,CACVC,mBAAJ,ICvBkV,ICQ9U,G,UAAY,eACd,EACA1J,EACAQ,GACA,EACA,KACA,KACA,OAIa,e","file":"js/update_2.939593ff.js","sourcesContent":["var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","'use strict';\n// B.2.3.13 String.prototype.sub()\nrequire('./_string-html')('sub', function (createHTML) {\n  return function sub() {\n    return createHTML(this, 'sub', '', '');\n  };\n});\n","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Update_2.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Update_2.vue?vue&type=style&index=0&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h1',[_vm._v(\"Assignment 2 - Billiards\")]),_c('h2',[_vm._v(\"Results\")]),_c('BilliardsFramework'),_c('h2',[_vm._v(\"Summary\")]),_vm._m(0)],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"text-align\":\"left\"}},[_c('div',{staticClass:\"update-text\"},[_vm._v(\" \\n      This checkpoint was a little tricky to get started with how heavy on the equations it is. However, after getting a sphere\\n      bouncing around in a static rectangle, things sped up in implementation. Its not quite deterministic, but it looks right!\\n    \")])])}]\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticStyle:{\"width\":\"500px\",\"height\":\"500px\",\"margin\":\"auto\"},attrs:{\"id\":\"three-js-div\"}}),_c('button',{staticStyle:{\"margin\":\"10px auto\"},on:{\"click\":function($event){return _vm.playSim()}}},[_vm._v(\"Simulate!\")]),_c('div',[_c('div',[_vm._v(\"Click a button, or update parameters yourself. Then click \\\"Simulate!\\\"\")]),_c('button',{staticStyle:{\"margin\":\"10px\"},on:{\"click\":function($event){return _vm.setupBasic()}}},[_vm._v(\"Basic Shot\")]),_c('button',{staticStyle:{\"margin\":\"10px\"},on:{\"click\":function($event){return _vm.setupFric()}}},[_vm._v(\"Basic Shot w/ Heavy Friction\")]),_c('button',{staticStyle:{\"margin\":\"10px\"},on:{\"click\":function($event){return _vm.setupRest()}}},[_vm._v(\"Basic Shot w/ Heavy Coeff. Restitution\")])]),_c('div',[_c('div',[_vm._v(\"Parameters:\")]),_c('div',[_c('span',[_vm._v(\"Restitution: \")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.co_restitution),expression:\"co_restitution\",modifiers:{\"number\":true}}],attrs:{\"type\":\"number\"},domProps:{\"value\":(_vm.co_restitution)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.co_restitution=_vm._n($event.target.value)},\"blur\":function($event){return _vm.$forceUpdate()}}})]),_c('div',[_c('span',[_vm._v(\"Sliding Friction: \")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.co_static),expression:\"co_static\",modifiers:{\"number\":true}}],attrs:{\"type\":\"number\"},domProps:{\"value\":(_vm.co_static)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.co_static=_vm._n($event.target.value)},\"blur\":function($event){return _vm.$forceUpdate()}}})]),_c('div',[_c('span',[_vm._v(\"Shot Force (x and y): \")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.initial_shot_x),expression:\"initial_shot_x\",modifiers:{\"number\":true}}],attrs:{\"type\":\"number\"},domProps:{\"value\":(_vm.initial_shot_x)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.initial_shot_x=_vm._n($event.target.value)},\"blur\":function($event){return _vm.$forceUpdate()}}}),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.initial_shot_y),expression:\"initial_shot_y\",modifiers:{\"number\":true}}],attrs:{\"type\":\"number\"},domProps:{\"value\":(_vm.initial_shot_y)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.initial_shot_y=_vm._n($event.target.value)},\"blur\":function($event){return _vm.$forceUpdate()}}})])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/**\r\n * A simple billiards simulation. Assumes that we have some boundaries, pool balls and a cue ball. \r\n */\r\nimport * as THREE from 'three';\r\n\r\nexport default class PhysicsSim {\r\n  constructor(co_restitution, co_sliding, balls, table) {\r\n    this.co_sliding = co_sliding;\r\n    this.co_restitution = co_restitution;\r\n  \r\n    // Play/pause state\r\n    this.isPlaying = false;\r\n\r\n    this.balls = balls;\r\n    // this.borders = borders;\r\n    this.table = table;\r\n\r\n  }\r\n\r\n  updateSim(dt) {\r\n    if(this.isPlaying) {\r\n      this.updateEverything(dt);\r\n    }\r\n  }\r\n\r\n  updateEverything(dt) {\r\n    // Update positions and calculate forces\r\n    let old_positions = this.updatePositions(dt);\r\n    let momentums = this.calcMomentums(dt);\r\n\r\n    // Handle collisions\r\n    let impulses = this.calcCollisions(dt, old_positions);\r\n\r\n    // Update velocities\r\n    for(let i = 0; i < this.balls.length; i++) {\r\n      let ball = this.balls[i];\r\n      let new_mntm = momentums[i];\r\n      let impulse = impulses[i];\r\n      let new_vel = new THREE.Vector2(new_mntm.x, new_mntm.y).divideScalar(ball.mass).add(impulse);\r\n\r\n      ball.vel = new_vel;\r\n    }\r\n  }\r\n\r\n  updatePositions(dt) {\r\n    let oldPos = [];\r\n    for(let ball of this.balls) {\r\n      let ball_x = ball.mesh.position.x;\r\n      let ball_y = ball.mesh.position.y;\r\n      oldPos.push({x: ball_x, y: ball_y});\r\n      let new_pos = new THREE.Vector2(ball_x, ball_y).add(  new THREE.Vector2(ball.vel.x, ball.vel.y).multiplyScalar(dt)  );\r\n      ball.mesh.position.x = new_pos.x;\r\n      ball.mesh.position.y = new_pos.y;\r\n    }\r\n    return oldPos;\r\n  }\r\n\r\n  calcMomentums(dt) {\r\n    let mntms = [];\r\n    for(let ball of this.balls) {\r\n      let force_calc = this.calculate_forces(dt, ball.mass, ball.vel);\r\n      let new_mntm = new THREE.Vector2(ball.vel.x * ball.mass, ball.vel.y * ball.mass).add(  new THREE.Vector2(force_calc.x, force_calc.y).multiplyScalar(dt)  );\r\n      mntms.push(new_mntm);\r\n    }\r\n    return mntms;\r\n  }\r\n\r\n  calcCollisions(dt, old_pos) {\r\n    // First, deal with any border collisions\r\n    let impulses = [];\r\n    for(let i = 0; i < old_pos.length; i++) {\r\n      let border_impulse = this.handle_border_collisions(this.balls[i], old_pos[i].x, old_pos[i].y);\r\n      impulses.push(border_impulse);\r\n    }\r\n\r\n    // Now, handle any ball-related collisions\r\n    this.handle_all_ball_collisions(dt, old_pos, impulses);\r\n\r\n    return impulses;\r\n  }\r\n\r\n  handle_all_ball_collisions(dt, old_pos, impulses) {\r\n    // Detect collisions\r\n    let rad = this.balls[0].mesh.geometry.boundingSphere.radius;\r\n    let mass = this.balls[0].mass;\r\n\r\n    for(let a = 0; a < this.balls.length; a++) {\r\n      for(let b = a + 1; b < this.balls.length; b++) {\r\n        if(a == b) { continue; }\r\n\r\n        let a_x = this.balls[a].mesh.position.x, a_y = this.balls[a].mesh.position.y,\r\n            b_x = this.balls[b].mesh.position.x, b_y = this.balls[b].mesh.position.y;\r\n\r\n        let a_vel = this.balls[a].vel, b_vel = this.balls[b].vel;\r\n\r\n        // Check if they collide\r\n        let dist = Math.sqrt( Math.pow(a_x - b_x,2) + Math.pow(a_y - b_y, 2) );\r\n        if(dist <= rad * 2.0) {\r\n          // Find the normalized line of action\r\n          let line_of_action = new THREE.Vector2(a_x, a_y).sub(new THREE.Vector2(b_x, b_y)).normalize();\r\n\r\n          // Find the impulses\r\n          let j = (mass * (new THREE.Vector2(b_vel.x, b_vel.y).dot(line_of_action) - new THREE.Vector2(a_vel.x, a_vel.y).dot(line_of_action)) * (this.co_restitution + 1)) / 2.0;\r\n\r\n          let a_impl = new THREE.Vector2(line_of_action.x, line_of_action.y).multiplyScalar(j / mass);\r\n          let b_impl = new THREE.Vector2(line_of_action.x, line_of_action.y).multiplyScalar(j / mass).multiplyScalar(-1.0);\r\n\r\n          // Update existing impulses\r\n          impulses[a].x += a_impl.x; impulses[a].y += a_impl.y;\r\n          impulses[b].x += b_impl.x; impulses[b].y += b_impl.y;\r\n\r\n          // Resolve the positions of the balls so they don't stick together!\r\n          this.balls[a].mesh.position.x = old_pos[a].x;\r\n          this.balls[a].mesh.position.y = old_pos[a].y;\r\n\r\n          this.balls[b].mesh.position.x = old_pos[b].x;\r\n          this.balls[b].mesh.position.y = old_pos[b].y;\r\n\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n\r\n\r\n  play() {\r\n    this.isPlaying = true;\r\n  }\r\n\r\n  pause() {\r\n    this.isPlaying = false;\r\n  }\r\n\r\n\r\n\r\n\r\n  /** Mathy / sim stuff */\r\n  calculate_forces(dt, mass, velocity) {\r\n    // u * mg * normalized velocity\r\n    // Don't use dt here because its not necessary just yet, will be used down the line\r\n    if(velocity.length() <= 0.0) {\r\n      return new THREE.Vector2(0, 0);\r\n    }\r\n\r\n    let umg = this.co_sliding * (mass * 9.81);\r\n    return new THREE.Vector2(-velocity.x, -velocity.y).normalize().multiplyScalar(umg); // Double check - Maybe 1 or 0? \r\n  }\r\n\r\n  handle_border_collisions(ball, prev_x, prev_y) {\r\n    // The ball is essentially just within four planes, so we can \r\n    //   just use the radius from the center of the sphere.\r\n\r\n    // Get the table parameters\r\n    let t_x = this.table.position.x, t_y = this.table.position.y, t_w2 = this.table.geometry.parameters.width / 2.0, t_h2 = this.table.geometry.parameters.height / 2.0;\r\n\r\n    // Ball parameters\r\n    let b_x = ball.mesh.position.x, b_y = ball.mesh.position.y, b_r = ball.mesh.geometry.boundingSphere.radius;\r\n\r\n    let return_impulse = new THREE.Vector2(0,0);\r\n\r\n    //// Check the sphere against the four planes\r\n    // Top: y + h/2\r\n    if( (b_y + b_r) >= t_y + t_h2 ) {\r\n\r\n      // First, let's just set the y-position to ensure that the ball isn't clipping\r\n      let current_y = ball.mesh.position.y;\r\n      ball.mesh.position.y = t_y + t_h2 - b_r;\r\n\r\n      // Now lets interpolate\r\n      let u = this.lerp_find_u(current_y, prev_y, ball.mesh.position.y);\r\n\r\n      // Use that to update the x-value\r\n      let current_x = ball.mesh.position.x;\r\n      ball.mesh.position.x = this.lerp(current_x, prev_x, u);\r\n      \r\n      // Calculate impulse\r\n      let impl = this.cushion_impulse(ball.mass, ball.vel, new THREE.Vector2(0, -1));\r\n      return_impulse.y += impl.y;\r\n      return_impulse.x += impl.x;\r\n\r\n      // return_impulse.y = (ball.vel.y * -2.0) * this.co_restitution;\r\n    }\r\n\r\n    // Bottom: y - h/2\r\n    if( (b_y - b_r) <= t_y - t_h2 ) {\r\n\r\n      // First, let's just set the y-position to ensure that the ball isn't clipping\r\n      let current_y = ball.mesh.position.y;\r\n      ball.mesh.position.y = t_y - t_h2 + b_r;\r\n\r\n      // Now lets interpolate\r\n      let u = this.lerp_find_u(current_y, prev_y, ball.mesh.position.y);\r\n\r\n      // Use that to update the x-value\r\n      let current_x = ball.mesh.position.x;\r\n      ball.mesh.position.x = this.lerp(current_x, prev_x, u);\r\n      \r\n      // Calculate impulse\r\n      let impl = this.cushion_impulse(ball.mass, ball.vel, new THREE.Vector2(0, 1));\r\n      return_impulse.y += impl.y;\r\n      return_impulse.x += impl.x;\r\n\r\n      // return_impulse.y = (ball.vel.y * -2.0) * this.co_restitution;\r\n\r\n    }\r\n\r\n    // Right: x + w/2\r\n    if( (b_x + b_r) >= t_x + t_w2 ) {\r\n\r\n      // First, let's just set the x-position to ensure that the ball isn't clipping\r\n      let current_x = ball.mesh.position.x;\r\n      ball.mesh.position.x = t_x + t_w2 - b_r;\r\n\r\n      // Now lets interpolate\r\n      let u = this.lerp_find_u(current_x, prev_x, ball.mesh.position.x);\r\n\r\n      // Use that to update the y-value\r\n      let current_y = ball.mesh.position.y;\r\n      ball.mesh.position.y = this.lerp(current_y, prev_y, u);\r\n      \r\n      // Calculate impulse\r\n      let impl = this.cushion_impulse(ball.mass, ball.vel, new THREE.Vector2(-1, 0));\r\n      return_impulse.y += impl.y;\r\n      return_impulse.x += impl.x;\r\n\r\n      // return_impulse.x = (ball.vel.x * -2.0) * this.co_restitution;\r\n\r\n    }\r\n    \r\n    // Left: x - w/2\r\n    if( (b_x - b_r) <= t_x - t_w2 ) {\r\n\r\n      // First, let's just set the x-position to ensure that the ball isn't clipping\r\n      let current_x = ball.mesh.position.x;\r\n      ball.mesh.position.x = t_x - t_w2 + b_r;\r\n\r\n      // Now lets interpolate\r\n      let u = this.lerp_find_u(current_x, prev_x, ball.mesh.position.x);\r\n\r\n      // Use that to update the y-value\r\n      let current_y = ball.mesh.position.y;\r\n      ball.mesh.position.y = this.lerp(current_y, prev_y, u);\r\n      \r\n      // Calculate impulse\r\n      let impl = this.cushion_impulse(ball.mass, ball.vel, new THREE.Vector2(1, 0));\r\n      return_impulse.y += impl.y;\r\n      return_impulse.x += impl.x;\r\n\r\n      // return_impulse.x = (ball.vel.x * -2.0) * this.co_restitution;\r\n\r\n    }\r\n\r\n    // return new THREE.Vector2(0,0);\r\n    return return_impulse;\r\n    \r\n  }\r\n\r\n  cushion_impulse(mass, velocity, line_of_action) {\r\n    // Just drop the 2nd mass/velocity from the equation\r\n    // let impulse = new THREE.Vector2(-velocity.x, -velocity.y).multiplyScalar(this.co_restitution + 1).divideScalar(1.0 / mass).dot(line_of_action);\r\n    // return \r\n    // return new THREE.Vector2(0,0);\r\n\r\n    // let impulse = new THREE.Vector2(-velocity.x, -velocity.y).multiplyScalar(this.co_restitution + 1);\r\n    // let div = impulse.divideScalar(1.0 / mass).dot(line_of_action);\r\n    \r\n    // console.log(impulse.x + \" , \" + impulse.y);\r\n    // console.log(div.x + \" , \" + div.y);\r\n    // return impulse;\r\n\r\n    // let impulse = new THREE.Vector2(-velocity.x, -velocity.y).multiplyScalar(this.co_restitution + 1).dot(line_of_action) / (1.0 / mass);\r\n    // // console.log(impulse.x + \" , \" + impulse.y);\r\n    // console.log(impulse);\r\n\r\n    let j = new THREE.Vector2(-velocity.x, -velocity.y).dot(line_of_action) * mass * (this.co_restitution + 1);\r\n\r\n    return new THREE.Vector2(line_of_action.x, line_of_action.y).multiplyScalar(j / mass);\r\n\r\n\r\n    // return new THREE.Vector2(0,0);\r\n  }\r\n\r\n  lerp(x, y, u) {\r\n    return x + (u * (y - x));\r\n  }\r\n\r\n  lerp_find_u(x, y, z) {\r\n    return (z - x) / (y - x);\r\n  }\r\n};","<template>\r\n  <div>\r\n    <div id=\"three-js-div\" style=\"width: 500px; height: 500px; margin: auto;\"></div>\r\n    <button @click=\"playSim()\" style=\"margin: 10px auto\">Simulate!</button>\r\n    <div>\r\n      <div>Click a button, or update parameters yourself. Then click \"Simulate!\"</div>\r\n      <button @click=\"setupBasic()\" style=\"margin: 10px\">Basic Shot</button>\r\n      <button @click=\"setupFric()\" style=\"margin: 10px\">Basic Shot w/ Heavy Friction</button>\r\n      <button @click=\"setupRest()\" style=\"margin: 10px\">Basic Shot w/ Heavy Coeff. Restitution</button>\r\n    </div>\r\n    <div>\r\n      <div>Parameters:</div>\r\n      <div>\r\n        <span>Restitution: </span> <input v-model.number=\"co_restitution\" type=\"number\"/>\r\n      </div>\r\n      <div>\r\n        <span>Sliding Friction: </span> <input v-model.number=\"co_static\" type=\"number\"/>\r\n      </div>\r\n      <div>\r\n        <span>Shot Force (x and y): </span> <input v-model.number=\"initial_shot_x\" type=\"number\"/> <input v-model.number=\"initial_shot_y\" type=\"number\"/>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three';\r\nimport SceneEntity from '../SceneEntity.js';\r\nimport Animation from '../Animation.js';\r\nimport PhysSim from './PhysSim.js';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      // Three.js Components\r\n      camera: null,\r\n      scene: null,\r\n      renderer: null,\r\n      mesh: null,\r\n      sceneObjects: [],\r\n\r\n      // UI Stuff\r\n      animationInput: \"\",\r\n\r\n      // Timeline details\r\n      originTime: 0,\r\n      lastFrameTime: 0,   // Milliseconds\r\n      endTime: 20 * 1000, // Milliseconds\r\n      isPaused: false,\r\n      threeClock: null,\r\n      \r\n      //// The physics simulation\r\n      // Parameters\r\n      tableWidth: 1.298 * 15, tableHeight: 2.438 * 15, ballSize: 0.057 * 15,\r\n      ballMass: 170 * 15, \r\n      co_restitution: 0.5, co_static: 0.3,\r\n      simulation: null,\r\n      initial_shot_x: -15, initial_shot_y: 0,\r\n\r\n      // Meshes for the sim\r\n      ballPositions: [\r\n        {x: 9, y: 0,  vel: [0,0], color: '#ffffff' },\r\n        {x: 2, y: 0,  vel: [0,0],   color: '#4f7bdb' },\r\n        {x: 0, y: 1,  vel: [0,0],   color: '#e36d19' },\r\n        {x: 0, y: -1, vel: [0,0],   color: '#c41010' }\r\n      ],\r\n      ballObjects: [],\r\n      borderObjects: [],\r\n      table: null,\r\n    };\r\n  },\r\n  methods: {\r\n    init_threejs() {\r\n      // Get a reference to the DOM that the renderer will be added to\r\n      const threeJsDiv = document.getElementById(\"three-js-div\");\r\n\r\n      // Setup the camera and scene\r\n      this.scene = new THREE.Scene();\r\n\r\n      // this.camera = new THREE.PerspectiveCamera(75, threeJsDiv.clientWidth / threeJsDiv.clientHeight, 0.01, 10);\r\n      this.camera = new THREE.PerspectiveCamera(75, threeJsDiv.clientWidth / threeJsDiv.clientHeight, 5, 1000);\r\n      // this.camera.position.z = -30;\r\n      // this.camera.rotateY(Math.PI);\r\n      this.camera.position.z = 30;\r\n\r\n      // Setup the scene\r\n      this.setupScene();\r\n\r\n      // Then setup the simulation and pass the meshes into it\r\n      this.setupSimulation();\r\n\r\n      // Set up the renderer\r\n      this.renderer = new THREE.WebGLRenderer({antialias: true});\r\n      this.renderer.setSize(threeJsDiv.clientWidth, threeJsDiv.clientHeight);\r\n\r\n      // Initialize the timeline\r\n      this.originTime = performance.now();\r\n      this.lastFrameTime = this.originTime;\r\n      this.threeClock = new THREE.Clock();\r\n\r\n      // Finally, add the renderer to the DOM\r\n      threeJsDiv.appendChild(this.renderer.domElement);\r\n    },\r\n    setupScene() {\r\n        \r\n        // Setup for billiard balls\r\n        for(let i = 0; i < this.ballPositions.length; i++) {\r\n          let pos = this.ballPositions[i];\r\n\r\n          // Geometry and mesh\r\n          let sphere = new THREE.Mesh(new THREE.SphereGeometry(this.ballSize, 32, 32), new THREE.MeshBasicMaterial({color: pos.color}) );\r\n          sphere.position.x = pos.x;\r\n          sphere.position.y = pos.y;\r\n\r\n          // Add the mesh to the scene\r\n          this.scene.add(sphere);\r\n\r\n          // Track the mesh\r\n          this.ballObjects.push({\r\n            mesh: sphere,\r\n            vel: i == 0 ? new THREE.Vector2(this.initial_shot_x, this.initial_shot_y) : new THREE.Vector2(... pos.vel),\r\n            mass: this.ballMass,\r\n          });\r\n        }\r\n\r\n        // Setup the pool table\r\n        let tableMat = new THREE.Mesh(new THREE.BoxGeometry(this.tableHeight, this.tableWidth, 1), new THREE.MeshBasicMaterial({color: \"#8aa891\"}));\r\n        tableMat.position.z = -2;\r\n\r\n        let underMat = new THREE.Mesh(new THREE.BoxGeometry(this.tableHeight + 2.5, this.tableWidth + 2, 1), new THREE.MeshBasicMaterial({color: \"#8aa891\"}));\r\n        underMat.position.z = -2.5;\r\n\r\n        let topBorder = new THREE.Mesh(new THREE.BoxGeometry(this.tableHeight + 2, 1, 1), new THREE.MeshBasicMaterial({color: \"#48695d\"}));\r\n        topBorder.position.y += (this.tableWidth / 2) + 0.8;\r\n\r\n        let bottomBorder = new THREE.Mesh(new THREE.BoxGeometry(this.tableHeight + 2, 1, 1), new THREE.MeshBasicMaterial({color: \"#48695d\"}));\r\n        bottomBorder.position.y -= (this.tableWidth / 2) + 0.8;\r\n\r\n        let leftBorder = new THREE.Mesh(new THREE.BoxGeometry(1, this.tableWidth + 2.2, 1), new THREE.MeshBasicMaterial({color: \"#48695d\"}));\r\n        leftBorder.position.x -= (this.tableHeight / 2) + 0.8;\r\n\r\n        let rightBorder = new THREE.Mesh(new THREE.BoxGeometry(1, this.tableWidth + 2.2, 1), new THREE.MeshBasicMaterial({color: \"#48695d\"}));\r\n        rightBorder.position.x += (this.tableHeight / 2) + 0.8;\r\n\r\n        this.scene.add(tableMat);\r\n        this.scene.add(underMat);\r\n        this.table = tableMat;\r\n        this.scene.add(topBorder);\r\n        this.scene.add(bottomBorder);\r\n        this.scene.add(leftBorder);\r\n        this.scene.add(rightBorder);\r\n\r\n        this.borderObjects.push(topBorder, bottomBorder, leftBorder, rightBorder);\r\n\r\n    },\r\n    updateScene(dt) {\r\n      // Run the simulation, which itself should update the meshes\r\n      this.simulation.updateSim(dt);\r\n    },\r\n    animationLoop(newTime) {\r\n      // Hook for threejs to call this method again\r\n      requestAnimationFrame(this.animationLoop);\r\n\r\n      // Update the scene\r\n      this.updateScene(this.threeClock.getDelta());\r\n\r\n      // Finally, render the updated scene\r\n      this.renderer.render(this.scene, this.camera);\r\n    },\r\n    setupSimulation() {\r\n      this.simulation = new PhysSim(this.co_restitution, this.co_static, this.ballObjects, this.table);\r\n    },\r\n    playSim() {\r\n      // Stop the existing sim\r\n      this.simulation.isPlaying = false;\r\n\r\n      // Reset the scene visually\r\n      for(let i = 0; i < this.ballObjects.length; i++) {\r\n        let bl = this.ballObjects[i];\r\n        bl.mesh.position.x = this.ballPositions[i].x;\r\n        bl.mesh.position.y = this.ballPositions[i].y;\r\n        // bl.vel = new THREE.Vector2(... this.ballPositions[i].vel); \r\n        bl.vel = i == 0 ? new THREE.Vector2(this.initial_shot_x, this.initial_shot_y) : new THREE.Vector2(... this.ballPositions[i].vel);\r\n      }\r\n\r\n      this.simulation = new PhysSim(this.co_restitution, this.co_static, this.ballObjects, this.table);\r\n      this.simulation.isPlaying = true;\r\n    },\r\n    setupBasic() {\r\n      this.co_restitution = 0.5;\r\n      this.co_static = 0.3;\r\n    },\r\n    setupFric() {\r\n      this.co_restitution = 0.5;\r\n      this.co_static = 0.95;\r\n    },\r\n    setupRest() {\r\n      this.co_restitution = 0.85;\r\n      this.co_static = 0.3;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.init_threejs();\r\n    this.animationLoop();\r\n  }\r\n};\r\n</script>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BilliardsFramework.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BilliardsFramework.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BilliardsFramework.vue?vue&type=template&id=68a03c47&\"\nimport script from \"./BilliardsFramework.vue?vue&type=script&lang=js&\"\nexport * from \"./BilliardsFramework.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\r\n  <div>\r\n    <h1>Assignment 2 - Billiards</h1>\r\n    <h2>Results</h2>\r\n    <!-- <DynamicFramework/> -->\r\n    <BilliardsFramework/>\r\n\r\n    <h2>Summary</h2>\r\n    <div style=\"text-align: left;\">\r\n      <div class=\"update-text\"> \r\n        This checkpoint was a little tricky to get started with how heavy on the equations it is. However, after getting a sphere\r\n        bouncing around in a static rectangle, things sped up in implementation. Its not quite deterministic, but it looks right!\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import DynamicFramework from '../components/DynamicFramework';\r\nimport BilliardsFramework from '../components/2_billiards/BilliardsFramework';\r\n\r\nexport default {\r\n  components: {\r\n    BilliardsFramework\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.update-text {\r\n  max-width: 1000px;\r\n  margin: 10px auto;\r\n}\r\n\r\n@media only screen and (max-width: 950px) {\r\n  .update-text {\r\n    max-width: 100%;\r\n  }\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Update_2.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Update_2.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Update_2.vue?vue&type=template&id=1b8d91ac&\"\nimport script from \"./Update_2.vue?vue&type=script&lang=js&\"\nexport * from \"./Update_2.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Update_2.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}